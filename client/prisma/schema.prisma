// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Sensory {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  drink      Drink     @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  drinkId    String
  votes     SensoryVote[]
}

model Drink {
  id  String  @id @default(cuid())
  name String
  description String
  brewery Brewery    @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId String
  sensories Sensory[]
  votes DrinkVote[]
}

model Brewery {
  id  String  @id @default(cuid())
  name String
  description String
  drinks Drink[]
  votes BreweryVote[]
}

model DrinkVote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  drink   Drink    @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  drinkId String

  @@id([userId, drinkId])
}

model SensoryVote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  sensory   Sensory    @relation(fields: [sensoryId], references: [id], onDelete: Cascade)
  sensoryId String

    @@id([userId, sensoryId])
}

model BreweryVote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  brewery   Brewery    @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId String
  
    @@id([userId, breweryId])
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  sensories   Sensory[] 
  breweryVotes  BreweryVote[]
  sensoryVotes  SensoryVote[]
  drinkVotes  DrinkVote[]
}